# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pR6mz_HN1rR5iZSeudCTxGulyg1W5ajC

This code is a combination of libraries and functions to upload a PDF file, convert it to DOCX, and extract text and images from specified pages. It utilizes PyPDF2, tabula-py, Pillow, ipywidgets, and other libraries for PDF processing and interaction. The code sets up interactive widgets for uer input, such as uploading a PDF file and specifying start/end pages, and then processes the PDF based on the user's input. The code also converts any images with transparency to JPEG format during extraction.

PLEASE EXECUTE IT 2-3 TIMES IF IT DOES NOT PARSE THE WHOLE PDF FOR ONCE.
"""

# Install necessary packages using pip
!pip install --upgrade tabula-py
!pip install tabulate
!pip install PyPDF2
!pip install PyMuPDF
!pip install streamlit
!pip install tabula-py
!pip install Pillow
!pip install ipywidgets
!pip install pdf2docx

# Import required libraries
import tabula
import PyPDF2
from tabulate import tabulate
import ipywidgets as widgets
from IPython.display import display
import fitz
from PIL import Image
import io
from pdf2docx import Converter

# Display environment information for tabula
tabula.environment_info()

# Define a function to convert PDF to DOCX
def convert_pdf_to_docx(pdf_file, docx_file):
    cv = Converter(pdf_file)
    cv.convert(docx_file)
    cv.close()

# Define a function to extract text and images from a PDF
def extract_text_and_images_from_pdf(pdf_file, start_page, end_page, image_output_path):
    # Open the PDF file using PyPDF2
    pdfReader = PyPDF2.PdfReader(pdf_file)

    # Iterate through the specified range of pages
    for page_number in range(start_page - 1, min(end_page, len(pdfReader.pages))):
        # Extract text from the PDF page
        pageObj = pdfReader.pages[page_number]
        text = pageObj.extract_text()
        print(text)

        # Use tabula to extract tables from the PDF
        dfs = tabula.read_pdf(
            pdf_file,
            pages=page_number + 1,
            lattice=True,
            area=[0, 0, 50, 100],
            relative_area=True,
            multiple_tables=True,
        )

        # Print tables if found
        if dfs:
            for i, df in enumerate(dfs):
                print(f"Table {i+1} on page {page_number + 1}:")
                print(tabulate(df, headers='keys', tablefmt='grid'))
                print("\n")
        else:
            print("No tables found on page", page_number + 1)

        # Extract images and save as JPEG
        pdf_document = fitz.open(pdf_file)
        page = pdf_document[page_number]
        images = page.get_images(full=True)

        for img_index, img in enumerate(images):
            base_image = pdf_document.extract_image(img[0])
            image_bytes = base_image["image"]
            pil_image = Image.open(io.BytesIO(image_bytes))

            # Check if the image has an alpha channel (transparency)
            if pil_image.mode == 'RGBA':
                pil_image = pil_image.convert('RGBA')
                alpha = pil_image.split()[3]
                background = Image.new("RGB", pil_image.size, (255, 255, 255))
                background.paste(pil_image, mask=alpha)
                pil_image = background.convert('RGB')
            else:
                pil_image = pil_image.convert('RGB')

            # Save the image as JPEG
            output_file = f"{image_output_path}_page{page_number + 1}_img{img_index + 1}.jpeg"
            pil_image.save(output_file, "JPEG")

        pdf_document.close()

# Define interactive widgets for user input
file_upload = widgets.FileUpload(description="Choose a PDF file", accept=".pdf")
start_page_slider = widgets.IntSlider(description="Start Page", min=1, max=100, value=1)
end_page_slider = widgets.IntSlider(description="End Page", min=1, max=100, value=1)
image_output_path_text = widgets.Text(description="Image Output Path", value="/content/")

# Display interactive widgets
display(file_upload, start_page_slider, end_page_slider, image_output_path_text)

# Define a function to be called when the button is clicked
def on_button_click(b):
    # Extract PDF content from the uploaded file
    pdf_content = next(iter(file_upload.value.values()))['content']
    with open("uploaded_file.pdf", "wb") as f:
        f.write(pdf_content)

    # Convert PDF to DOCX
    convert_pdf_to_docx("uploaded_file.pdf", "output.docx")

    # Call the function to extract text and images from the PDF
    extract_text_and_images_from_pdf("uploaded_file.pdf", start_page_slider.value, end_page_slider.value, image_output_path_text.value)
    print("Processing Completed!")

# Create and display a button
process_button = widgets.Button(description="Process PDF")
process_button.on_click(on_button_click)
display(process_button)